name: Convert Draw.io Files

on:
  push:
    paths:
      - '**/*.drawio'

# Add permissions needed for the workflow
permissions:
  contents: write

jobs:
  convert:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Check out the repository
        uses: actions/checkout@v3

      # Step 2: Install dependencies
      - name: Install Draw.io and dependencies
        run: |
          sudo apt-get update
          # Use libasound2t64 instead of libasound2 for Ubuntu Noble (24.04)
          sudo apt-get install -y wget unzip xvfb libasound2t64 libgbm1 libnspr4 libnss3 libxss1
          wget https://github.com/jgraph/drawio-desktop/releases/download/v26.2.2/drawio-amd64-26.2.2.deb
          sudo apt-get -f install -y
          sudo dpkg -i drawio-amd64-26.2.2.deb || sudo apt-get -f install -y

      # Step 3: Create output directories
      - name: Create output folders
        run: |
          mkdir -p svg_files html_files
          
          # Initialize CSV changelogs with headers if they don't exist
          if [ ! -f "svg_files/CHANGELOG.csv" ]; then
            echo "Date,User,Action,File,Type" > svg_files/CHANGELOG.csv
          fi
          if [ ! -f "html_files/CHANGELOG.csv" ]; then
            echo "Date,User,Action,File,Type" > html_files/CHANGELOG.csv
          fi

      # Step 4: Convert .drawio files to SVG and wrap them in HTML
      - name: Convert Draw.io files
        run: |
          # Set up virtual display for headless operation
          Xvfb :99 -screen 0 1024x768x16 &
          export DISPLAY=:99
          sleep 1 # Give Xvfb time to start

          # Use a different approach - temporary script
          cat > /tmp/convert-drawio.sh << 'EOL'
          #!/bin/bash
          input_file=$1
          output_file=$2
          drawio -x -f svg -o "$output_file" "$input_file"
          EOL
          chmod +x /tmp/convert-drawio.sh

          # Find files and handle them properly with spaces in filenames
          find . -type f -name "*.drawio" -print0 | while IFS= read -r -d $'\0' file; do
            # Get the base filename without extension, preserving spaces
            base=$(basename "$file" .drawio)
            echo "Processing: $file"

            mkdir -p "svg_files"
            output_path="svg_files/${base}.svg"
            
            # Run the conversion with xvfb-run - quote variables to handle spaces properly
            xvfb-run -a /tmp/convert-drawio.sh "$file" "$output_path"
            
            # Check if conversion succeeded
            if [ ! -f "$output_path" ]; then
              echo "Failed to convert $file to SVG. Trying alternative method..."
              # Alternative approach using node directly if installed with drawio
              xvfb-run -a drawio -x -f svg -o "$output_path" "$file"
            fi

            # Create an HTML wrapper
            echo '<!DOCTYPE html>' > "html_files/${base}.html"
            echo '<html lang="en">' >> "html_files/${base}.html"
            echo '<head>' >> "html_files/${base}.html"
            echo '  <meta charset="UTF-8">' >> "html_files/${base}.html"
            echo "  <title>${base}</title>" >> "html_files/${base}.html"
            echo '  <style>' >> "html_files/${base}.html"
            echo '    body { margin: 0; padding: 0; }' >> "html_files/${base}.html"
            echo '    svg { max-width: 100%; height: auto; display: block; }' >> "html_files/${base}.html"
            echo '  </style>' >> "html_files/${base}.html"
            echo '</head>' >> "html_files/${base}.html"
            echo '<body>' >> "html_files/${base}.html"

            cat "svg_files/${base}.svg" >> "html_files/${base}.html"

            echo '</body>' >> "html_files/${base}.html"
            echo '</html>' >> "html_files/${base}.html"

            # Log the changes in CSV format with date as dd.mm.yyyy and full name
            # Get the full name of the author (or committer) of the latest commit that modified this file
            AUTHOR=$(git log -1 --format="%aN" -- "$file" || echo "${{ github.actor }}")
            FORMATTED_DATE=$(date +"%d.%m.%Y")
            
            # Check if SVG already exists to determine if this is a new or modified diagram
            if [ -f "svg_files/${base}.svg" ]; then
              CHANGE_TYPE="Modified"
            else
              CHANGE_TYPE="New"
            fi
            
            echo "$FORMATTED_DATE,\"$AUTHOR\",Converted,\"${base}.drawio\",\"$CHANGE_TYPE\"" >> svg_files/CHANGELOG.csv
            echo "$FORMATTED_DATE,\"$AUTHOR\",Wrapped to HTML,\"${base}.svg\",\"$CHANGE_TYPE\"" >> html_files/CHANGELOG.csv
          done

      # Step 5: Commit and push changes
      - name: Commit and push changes
        id: commit_changes
        run: |
          git config --local user.name "github-actions[bot]"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git add svg_files html_files
          # Only commit if there are changes
          if git diff --staged --quiet; then
            echo "No changes to commit"
            echo "changes_made=false" >> $GITHUB_OUTPUT
          else
            git commit -m "Auto-converted draw.io files"
            # Use GitHub token for authentication
            git push "https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git" HEAD:${GITHUB_REF#refs/heads/}
            echo "changes_made=true" >> $GITHUB_OUTPUT
          fi
          
      # Step 6: Send email with changelog (when configured)
      - name: Send changelog via email
        if: steps.commit_changes.outputs.changes_made == 'true'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.MAIL_SERVER }}
          server_port: ${{ secrets.MAIL_PORT }}
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: Diagrams Repository - Changelog Update (${{ github.repository }})
          body: |
            Hello Team,
            
            Changes have been made to diagrams in the repository.
            Please find attached the latest changelog.
            
            Repository: ${{ github.repository }}
            Commit: ${{ github.sha }}
            
            Regards,
            GitHub Actions
          to: ${{ secrets.MAIL_RECIPIENTS }}
          from: GitHub Actions <${{ secrets.MAIL_USERNAME }}>
          attachments: ./svg_files/CHANGELOG.csv
      
      # Step 6: Send an email with the changelog (if changes were made)
      - name: Send changelog email
        if: success() && github.event_name == 'push'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.MAIL_SERVER }}
          server_port: ${{ secrets.MAIL_PORT }}
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: Diagrams Repository - Changelog Update
          body: |
            Hello Team,
            
            Changes have been made to diagrams in the repository.
            Please find attached the latest changelog.
            
            Regards,
            GitHub Actions
          to: ${{ secrets.MAIL_RECIPIENTS }}
          from: GitHub Actions <${{ secrets.MAIL_USERNAME }}>
          attachments: ./svg_files/CHANGELOG.csv
